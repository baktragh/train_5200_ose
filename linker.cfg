# Train unified engine for Atari 5200
# Open source edition (OSE)


SYMBOLS {
    __CARTSIZE__:        type = weak,   value = $8000;   # possible values: $4000 and $8000
    __CART_ENTRY__:      type = import;
    __STACKSIZE__:       type = weak,   value = $0200;   # 2 pages stack
    __RESERVED_MEMORY__: type = export, value = $0;      # space for 20x24 screen buffer (default display list is in ROM)
}
MEMORY {
    ZP:        file = "", start = $001D,                size = $00AD,                                               define = yes;
    RAM:       file = "", start = $1000,                size = $4000 - __STACKSIZE__ - __RESERVED_MEMORY__ - $0E00, define = yes;
    ROM:       file = %O, start = $C000 - __CARTSIZE__, size = __CARTSIZE__ - $18,                                  define = yes, fill = yes, fillval = $FF;
    CARTNAME:  file = %O, start = $BFE8,                size = $0014                                                              fill = yes, fillval = $40;
    CARTYEAR:  file = %O, start = $BFFC,                size = $0002                                                              fill = yes, fillval = $59;
    CARTENTRY: file = %O, start = $BFFE,                size = $0002;
    DUMMY:     file = "", start = $00,                  size = $FFFF;
    
    # Game frame buffer and status bar frame buffer
    GAMESCREEN: file= "",define=yes,     start = $0400,     size = 960;
    STATUSBARSCREEN: file="",            start = $0400+960, size = 40;
    
    # PMG area (single-line 2KB, start at $0800)
    PMGAREA:   file = "",define=yes,    start = $0800, size = $0800;

}
SEGMENTS {
    ZEROPAGE:  load = ZP,             type = zp,                optional = yes;
    EXTZP:     load = ZP,             type = zp,                optional = yes;
    DLIST:     load = ROM  ,          type = ro,  define = yes, optional = yes;
    STARTUP:   load = ROM,            type = ro,  define = yes, optional = yes;
    LOWCODE:   load = ROM,            type = ro,  define = yes, optional = yes;
    ONCE:      load = ROM,            type = ro,                optional = yes;
    CODE:      load = ROM,            type = ro,  define = yes;
    RODATA:    load = ROM,            type = ro,                optional = yes;
    DATA:      load = ROM, run = RAM, type = rw,  define = yes, optional = yes;
    BSS:       load = RAM,            type = bss, define = yes, optional = yes;
    
    #5200 Cartridge fields
    CARTNAME:  load = CARTNAME,       type = ro;
    DCARTYEAR: load = CARTYEAR,       type = ro;
    CARTYEAR:  load = DUMMY,          type = rw;
    CARTENTRY: load = CARTENTRY,      type = ro;
    
    #Segments of game data
    TRAIN_SEG_CHARSET1:   load = ROM, run=RAM, type = rw ,define=yes,       align = $0400;
    TRAIN_SEG_CHARSET2:   load = ROM, type = ro,                            align = $0400;
    TRAIN_SEG_DL:         load = ROM, type = ro,                            align = $0400;
    
    #The player and music are binary load files. These will be loaded from ROM to RAM
    #manually in the code.
    TRAIN_SEG_RMTSONG:    load = ROM, type = ro;
    TRAIN_SEG_RMTPLAYER:  load = ROM, type = ro;
    
    #PMG and screen memory. Nothe that the type is BSS. Uninitialized
    TRAIN_SEG_PMGAREA:         load = PMGAREA, type = bss;
    TRAIN_SEG_GAMESCREEN:      load = GAMESCREEN, type = bss;
    TRAIN_SEG_STATUSBARSCREEN: load = STATUSBARSCREEN, type = bss;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
